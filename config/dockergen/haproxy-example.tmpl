global
  log stdout len 65335 local0
  log /dev/log    local0
  log /dev/log    local1 notice
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  daemon
  #maxconn 4096


defaults
  log global
  mode http
  option dontlognull
  option httplog
  timeout connect 50000
  timeout client 50000
  timeout server 50000

http-errors httperrors
  errorfile 503 /config/error-pages/503.http
  errorfile 400 /config/error-pages/404.http


listen stats
  bind *:9000
  mode http
  log-format "%ci %ST %HM %HP%HQ"
  http-request set-log-level silent
  stats enable
  stats hide-version
  stats scope .
  stats realm Haproxy\ Statistics
  stats uri /


frontend http
  bind *:80
  http-request set-var(proc.sub) str("tailscale"),lower if { hdr_end(Host) -i .tailscale.yourdomain.co.uk }
  http-request set-var(proc.application) req.hdr(host),lower,regsub(\.tailscale\.yourdomain\.co\.uk$,) if { hdr_end(Host) -i .tailscale.yourdomain.co.uk }
  redirect scheme https if !{ ssl_fc }
  
  default_backend failback

frontend secure 
  bind *:443 ssl crt /etc/ssl/private/tailscale-yourdomain.co.uk.pem 
  tcp-request inspect-delay 15s
  errorfiles httperrors
  mode http
  option forwardfor

  http-request set-var(proc.sub) str("insecure"),lower if { hdr_end(Host) -i .yourdomain.co.uk }
  http-request set-var(proc.application) req.hdr(host),lower,regsub(\.yourdomain\.co\.uk$,) if { hdr_end(Host) -i .yourdomain.co.uk }

  http-request set-var(proc.sub) str("tailscale"),lower if { hdr_end(Host) -i .tailscale.yourdomain.co.uk }
  http-request set-var(proc.application) req.hdr(host),lower,regsub(\.tailscale\.yourdomain\.co\.uk$,) if { hdr_end(Host) -i .tailscale.yourdomain.co.uk }

  http-request set-var(proc.origin) req.hdr(Origin)
  http-request set-var(proc.referrer) req.hdr(Referer)
  http-request set-var(proc.host) req.hdr(Host)
  http-request set-var(req.scheme) str(https) if { ssl_fc }
  http-request set-var(req.questionmark) str(?) if { query -m found }
  http-request set-var(req.path) path
  http-request set-var(txn.req_hdrs) req.hdrs

  http-request set-header X-Forwarded-Host   %[req.hdr(Host)]
  http-request set-header X-Forwarded-For %[src] if ! { req.hdr(X-Forwarded-For) -m found }
  http-request set-header X-Forwarded-Method %[method]
  http-request set-header X-Forwarded-Proto  %[var(req.scheme)]
  http-request set-header X-Forwarded-URI    %[path]%[var(req.questionmark)]%[query]
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-response set-header Access-Control-Allow-Headers "Cookie, Origin, X-Requested-With, Content-Type, Accept, Authorization, JSNLog-RequestId, activityId, applicationId, applicationUserId, channelId, senderId, sessionId"
  http-response add-header Access-Control-Allow-Methods "FETCH, GET, HEAD, OPTIONS, POST, PUT, CONNECT, TRACE, PATCH"
  http-response add-header sec-fetch-site cross-site
  http-response set-header Strict-Transport-Security "max-age=15552000; includeSubDomains"
  http-response set-header X-Frame-Options allowall
  http-response set-header X-Xss-Protection "0" #"1; mode=block"

  acl	secure_domain 	hdr_end(Host) -i .secure.yourdomain.co.uk
  acl	admin_domain	hdr_end(Host) -i .admin.yourdomain.co.uk
  acl   top_domain	hdr_end(Host) -i .yourdomain.co.uk
 
  use_backend %[req.hdr(Host)] 
  default_backend failback
  
  
  

{{ range $host, $containers := groupByMulti $ "Env.TAILSCALE_HOST" "," }}
{{ $name_dots := replace $host "." "_" -1}}
{{ $name := replace $name_dots "*" "www" -1 }}
{{ $host_clean := replace $host "*" "www" -1 }}
# 
# {{$host}}
backend {{$host_clean}}

{{ range $index, $value := $containers }}
option http-server-close


	{{ $addrLen := len $value.Addresses }}
	{{ $network := index $value.Networks 0 }}

	{{ if $value.State.Health.Status }}
		{{ if ne $value.State.Health.Status "healthy" }}
			{{ continue }}
		{{ end }}
	{{ end }}
	
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $value.Addresses 0 }}
  http-response add-header Set-Cookie "APP=%[var(proc.application)]; max-age=2620800; domain=.yourdomain.co.uk; path=/; samesite=lax; httponly;"
  http-response add-header Set-Cookie "SUB=%[var(proc.sub)]; max-age=2620800; domain=.yourdomain.co.uk; path=/; samesite=lax; httponly;"
  server {{ $name }}{{ $index }} {{ $network.IP }}:{{ $address.Port }}

		{{ end }}

	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $value.Env.VIRTUAL_PORT }}
		{{ range $i, $address := $value.Addresses }}
			{{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
  http-response add-header Set-Cookie "APP=%[var(proc.application)]; max-age=2620800; domain=.yourdomain.co.uk; path=/; samesite=lax; httponly;"
  http-response add-header Set-Cookie "SUB=%[var(proc.sub)]; max-age=2620800; domain=.yourdomain.co.uk; path=/; samesite=lax; httponly;"
  server  {{ $name }}{{ $index }} {{ $network.IP }}:{{ $address.Port }}

			{{ end }}
		{{ end }}

	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $i, $address := $value.Addresses }}
			{{ if eq $address.Port "80" }}
  http-response add-header Set-Cookie "APP=%[var(proc.application)]; max-age=2620800; domain=.yourdomain.co.uk; path=/; samesite=lax; httponly;"
  http-response add-header Set-Cookie "SUB=%[var(proc.sub)]; max-age=2620800; domain=.yourdomain.co.uk; path=/; samesite=lax; httponly;"
  server  {{ $name }}{{ $index }} {{ $network.IP }}:{{ $address.Port }}

			{{ end }}
		{{ end }}
	{{ end }}
 
{{ end }}
 
{{ end }}

#
#
backend failback

